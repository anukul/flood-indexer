//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var IndexingStatus = newIndexingStatusTable("public", "indexing_status", "")

type indexingStatusTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	Entity    postgres.ColumnString
	LastBlock postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type IndexingStatusTable struct {
	indexingStatusTable

	EXCLUDED indexingStatusTable
}

// AS creates new IndexingStatusTable with assigned alias
func (a IndexingStatusTable) AS(alias string) *IndexingStatusTable {
	return newIndexingStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IndexingStatusTable with assigned schema name
func (a IndexingStatusTable) FromSchema(schemaName string) *IndexingStatusTable {
	return newIndexingStatusTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new IndexingStatusTable with assigned table prefix
func (a IndexingStatusTable) WithPrefix(prefix string) *IndexingStatusTable {
	return newIndexingStatusTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new IndexingStatusTable with assigned table suffix
func (a IndexingStatusTable) WithSuffix(suffix string) *IndexingStatusTable {
	return newIndexingStatusTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newIndexingStatusTable(schemaName, tableName, alias string) *IndexingStatusTable {
	return &IndexingStatusTable{
		indexingStatusTable: newIndexingStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newIndexingStatusTableImpl("", "excluded", ""),
	}
}

func newIndexingStatusTableImpl(schemaName, tableName, alias string) indexingStatusTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		EntityColumn    = postgres.StringColumn("entity")
		LastBlockColumn = postgres.IntegerColumn("last_block")
		allColumns      = postgres.ColumnList{IDColumn, EntityColumn, LastBlockColumn}
		mutableColumns  = postgres.ColumnList{EntityColumn, LastBlockColumn}
	)

	return indexingStatusTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Entity:    EntityColumn,
		LastBlock: LastBlockColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
